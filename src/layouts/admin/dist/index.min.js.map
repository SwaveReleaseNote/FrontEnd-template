{"version":3,"sources":["index.tsx"],"names":["react_1","require","react_router_dom_1","navbar_1","sidebar_1","Footer_1","routes_1","ProjectDashboard_1","Admin","props","rest","__rest","location","useLocation","_a","useState","open","setOpen","_b","currentRoute","setCurrentRoute","useEffect","getActiveRoute","console","log","pathname","routes","i","length","window","href","indexOf","layout","path","name","document","documentElement","dir","createElement","className","onClose","__assign","onOpenSidenav","brandText","secondary","getActiveNavbar","Routes","map","prop","key","Route","element","component","Navigate","to","replace","exports"],"mappings":"6nBAAA,IAAAA,QAAAC,QAAA,SACAC,mBAAAD,QAAA,oBACAE,SAAAF,QAAA,qBACAG,UAAAH,QAAA,sBACAI,SAAAJ,QAAA,4BACAK,SAAAL,QAAA,UAEAM,mBAAAN,QAAA,8CAEA,SAAwBO,MAAMC,GAC5B,IAAQC,EAAAC,OAAAF,EAAA,IACFG,EAAWV,mBAAAW,cACXC,EAAAd,QAAA,QAAAe,UAAA,GAACC,EAAAF,EAAA,GAAMG,EAAAH,EAAA,GACPI,EAAAlB,QAAA,QAAAe,SAAA,kBAACI,EAAAD,EAAA,GAAcE,EAAAF,EAAA,GAErBlB,QAAA,QAAMqB,UAAU,WACdC,EAAehB,SAAA,SACfiB,QAAQC,IAAIZ,EAASa,UACK,mBAAtBb,EAASa,SACXR,GAAQ,GACuB,yBAAtBL,EAASa,SAClBR,GAAQ,GAERA,GAAQ,IAET,CAACL,EAASa,WACbzB,QAAA,QAAMqB,UAAU,WACdE,QAAQC,IAAIR,IACX,CAACA,IAEJ,IAAMM,EAAiB,SAACI,GAEtB,IADA,IACSC,EAAI,EAAGA,EAAID,EAAOE,OAAQD,KAIxB,IAFPE,OAAOjB,SAASkB,KAAKC,QACnBL,EAAOC,GAAGK,OAAS,IAAMN,EAAOC,GAAGM,OAGrCb,EAAgBM,EAAOC,GAAGO,MAG9B,MAVkB,kBAmDpB,OADAC,SAASC,gBAAgBC,IAAM,MAE7BrC,QAAA,QAAAsC,cAAA,MAAA,CAAKC,UAAU,sBACZvB,EAAOhB,QAAA,QAAAsC,cAAClC,UAAA,QAAO,CAACY,KAAMA,EAAMwB,QAAS,WAAM,OAAAvB,GAAQ,MAAa,KAEjEjB,QAAA,QAAAsC,cAAA,MAAA,CAAKC,UAAU,mDAGbvC,QAAA,QAAAsC,cAAA,OAAA,CACEC,UAAW,kDACTvB,EAAO,gBAAkB,mBAI3BhB,QAAA,QAAAsC,cAAA,MAAA,CAAKC,UAAU,UACbvC,QAAA,QAAAsC,cAACnC,SAAA,QAAMsC,SAAA,CACLC,cAAe,WAAM,OAAAzB,GAAQ,IAC7B0B,UAAWxB,EACXyB,UAxDY,SAAClB,GAEvB,IADA,IACSC,EAAI,EAAGA,EAAID,EAAOE,OAAQD,IACjC,IACuE,IAArEE,OAAOjB,SAASkB,KAAKC,QAAQL,EAAOC,GAAGK,OAASN,EAAOC,GAAGM,MAE1D,OAAOP,EAAOC,GAAGiB,UAGrB,OARmB,EAuDEC,CAAgBvC,SAAA,UACvBI,IAENV,QAAA,QAAAsC,cAAA,MAAA,CAAKC,UAAU,yDACbvC,QAAA,QAAAsC,cAACpC,mBAAA4C,OAAM,KAGMxC,SAAA,QAlDTyC,IAAI,SAACC,EAAMC,GACvB,MAAoB,WAAhBD,EAAKhB,OACW,+BAAdgB,EAAKf,KAELjC,QAAA,QAAAsC,cAACpC,mBAAAgD,MAAK,CACJjB,KAAM,IAAIe,EAAKf,KACfkB,QAASnD,QAAA,QAAAsC,cAAC/B,mBAAA,QAAgB,MAC1B0C,IAAKA,IAKPjD,QAAA,QAAAsC,cAACpC,mBAAAgD,MAAK,CACJjB,KAAM,IAAIe,EAAKf,KACfkB,QAASH,EAAKI,UACdH,IAAKA,IAKJ,OAgCCjD,QAAA,QAAAsC,cAACpC,mBAAAgD,MAAK,CACJjB,KAAK,IACLkB,QAASnD,QAAA,QAAAsC,cAACpC,mBAAAmD,SAAQ,CAACC,GAAG,iBAAiBC,SAAO,QAIpDvD,QAAA,QAAAsC,cAAA,MAAA,CAAKC,UAAU,OACbvC,QAAA,QAAAsC,cAACjC,SAAA,QAAM,WA1GrBmD,QAAA,QAAAhD","file":"index.min.js","sourcesContent":["import React from \"react\";\r\nimport { Routes, Route, Navigate, useLocation } from \"react-router-dom\";\r\nimport Navbar from \"components/navbar\";\r\nimport Sidebar from \"components/sidebar\";\r\nimport Footer from \"components/footer/Footer\";\r\nimport routes from \"routes\";\r\n\r\nimport ProjectDashboard from \"views/admin/default/pages/ProjectDashboard\";\r\n\r\nexport default function Admin(props: { [x: string]: any }) {\r\n  const { ...rest } = props;\r\n  const location = useLocation();\r\n  const [open, setOpen] = React.useState(false);\r\n  const [currentRoute, setCurrentRoute] = React.useState(\"Main Dashboard\");\r\n\r\n  React.useEffect(() => {\r\n    getActiveRoute(routes);\r\n    console.log(location.pathname);\r\n    if (location.pathname === \"/admin/default\") {\r\n      setOpen(false);\r\n    } else if (location.pathname === \"/admin/createProject\") {\r\n      setOpen(false);\r\n    } else {\r\n      setOpen(true);\r\n    }\r\n  }, [location.pathname]);\r\n  React.useEffect(() => {\r\n    console.log(open);\r\n  }, [open]);\r\n\r\n  const getActiveRoute = (routes: RoutesType[]): string | boolean => {\r\n    let activeRoute = \"Main Dashboard\";\r\n    for (let i = 0; i < routes.length; i++) {\r\n      if (\r\n        window.location.href.indexOf(\r\n          routes[i].layout + \"/\" + routes[i].path\r\n        ) !== -1\r\n      ) {\r\n        setCurrentRoute(routes[i].name);\r\n      }\r\n    }\r\n    return activeRoute;\r\n  };\r\n  const getActiveNavbar = (routes: RoutesType[]): string | boolean => {\r\n    let activeNavbar = false;\r\n    for (let i = 0; i < routes.length; i++) {\r\n      if (\r\n        window.location.href.indexOf(routes[i].layout + routes[i].path) !== -1\r\n      ) {\r\n        return routes[i].secondary;\r\n      }\r\n    }\r\n    return activeNavbar;\r\n  };\r\n\r\n  const getRoutes = (routes: RoutesType[]): any => {\r\n    return routes.map((prop, key) => {\r\n      if (prop.layout === \"/admin\") {\r\n        if (prop.path === \"dashboard/:projectId/:role\") {\r\n          return (\r\n            <Route\r\n              path={`/${prop.path}`}\r\n              element={<ProjectDashboard />}\r\n              key={key}\r\n            />\r\n          );\r\n        } else {\r\n          return (\r\n            <Route\r\n              path={`/${prop.path}`}\r\n              element={prop.component}\r\n              key={key}\r\n            />\r\n          );\r\n        }\r\n      } else {\r\n        return null;\r\n      }\r\n    });\r\n  };\r\n\r\n  document.documentElement.dir = \"ltr\";\r\n  return (\r\n    <div className=\"flex h-full w-full\">\r\n      {open ? <Sidebar open={open} onClose={() => setOpen(false)} /> : null}\r\n      {/* Navbar & Main Content */}\r\n      <div className=\"h-full w-full bg-lightPrimary dark:!bg-navy-900\">\r\n        {/* Main Content */}\r\n        {/* ml-auto로 조정시 전체 width 사용 before - 313px*/}\r\n        <main\r\n          className={`mx-12 h-full flex-none transition-all md:pr-2 ${\r\n            open ? \"xl:ml-[313px]\" : \"xl:ml-[150px]]\"\r\n          }`}\r\n        >\r\n          {/* Routes */}\r\n          <div className=\"h-full\">\r\n            <Navbar\r\n              onOpenSidenav={() => setOpen(true)}\r\n              brandText={currentRoute}\r\n              secondary={getActiveNavbar(routes)}\r\n              {...rest}\r\n            />\r\n            <div className=\"pt-5s mx-auto mb-auto h-full min-h-[84vh] p-2 md:pr-2\">\r\n              <Routes>\r\n                {/* TODO: routes.tsx에 프로젝트 리스트 선택할 수 있도록 추가\r\n                     */}\r\n                {getRoutes(routes)}\r\n\r\n                <Route\r\n                  path=\"/\"\r\n                  element={<Navigate to=\"/admin/default\" replace />}\r\n                />\r\n              </Routes>\r\n            </div>\r\n            <div className=\"p-3\">\r\n              <Footer />\r\n            </div>\r\n          </div>\r\n        </main>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n"]}
