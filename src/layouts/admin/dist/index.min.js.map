{"version":3,"sources":["index.tsx"],"names":["react_1","require","react_router_dom_1","navbar_1","sidebar_1","Footer_1","routes_1","Admin","props","rest","__rest","location","useLocation","_a","useState","open","setOpen","_b","currentRoute","setCurrentRoute","useEffect","window","addEventListener","innerWidth","getActiveRoute","pathname","routes","i","length","href","indexOf","layout","path","name","document","documentElement","dir","createElement","className","onClose","__assign","onOpenSidenav","brandText","secondary","getActiveNavbar","Routes","map","prop","key","Route","element","component","Navigate","to","replace","exports"],"mappings":"6nBAAA,IAAAA,QAAAC,QAAA,SACAC,mBAAAD,QAAA,oBACAE,SAAAF,QAAA,qBACAG,UAAAH,QAAA,sBACAI,SAAAJ,QAAA,4BACAK,SAAAL,QAAA,UAEA,SAAwBM,MAAMC,GAC5B,IAAQC,EAAAC,OAAAF,EAAA,IACFG,EAAWT,mBAAAU,cACXC,EAAAb,QAAA,QAAAc,UAAA,GAACC,EAAAF,EAAA,GAAMG,EAAAH,EAAA,GACPI,EAAAjB,QAAA,QAAAc,SAAA,kBAACI,EAAAD,EAAA,GAAcE,EAAAF,EAAA,GAErBjB,QAAA,QAAMoB,UAAU,WACdC,OAAOC,iBAAiB,SAAU,WAChC,OAAAD,OAAOE,WAAa,KAAOP,GAAQ,GAASA,GAAQ,MAErD,IACHhB,QAAA,QAAMoB,UAAU,WACdI,EAAelB,SAAA,UACd,CAACK,EAASc,WAEb,IAAMD,EAAiB,SAACE,GAEtB,IADA,IACSC,EAAI,EAAGA,EAAID,EAAOE,OAAQD,KAIxB,IAFPN,OAAOV,SAASkB,KAAKC,QACnBJ,EAAOC,GAAGI,OAAS,IAAML,EAAOC,GAAGK,OAGrCb,EAAgBO,EAAOC,GAAGM,MAG9B,MAVkB,kBAqCpB,OADAC,SAASC,gBAAgBC,IAAM,MAE7BpC,QAAA,QAAAqC,cAAA,MAAA,CAAKC,UAAU,sBACbtC,QAAA,QAAAqC,cAACjC,UAAA,QAAO,CAACW,KAAMA,EAAMwB,QAAS,WAAM,OAAAvB,GAAQ,MAE5ChB,QAAA,QAAAqC,cAAA,MAAA,CAAKC,UAAU,wDAEbtC,QAAA,QAAAqC,cAAA,OAAA,CACEC,UAAW,mEAGXtC,QAAA,QAAAqC,cAAA,MAAA,CAAKC,UAAU,UACbtC,QAAA,QAAAqC,cAAClC,SAAA,QAAMqC,SAAA,CACLC,cAAe,WAAM,OAAAzB,GAAQ,IAC7B0B,UAAWxB,EACXyB,UAvCY,SAACjB,GAEvB,IADA,IACSC,EAAI,EAAGA,EAAID,EAAOE,OAAQD,IACjC,IACuE,IAArEN,OAAOV,SAASkB,KAAKC,QAAQJ,EAAOC,GAAGI,OAASL,EAAOC,GAAGK,MAE1D,OAAON,EAAOC,GAAGgB,UAGrB,OARmB,EAsCEC,CAAgBtC,SAAA,UACvBG,IAENT,QAAA,QAAAqC,cAAA,MAAA,CAAKC,UAAU,yDACbtC,QAAA,QAAAqC,cAACnC,mBAAA2C,OAAM,KAGMvC,SAAA,QAjCTwC,IAAI,SAACC,EAAMC,GACvB,MAAoB,WAAhBD,EAAKhB,OAEL/B,QAAA,QAAAqC,cAACnC,mBAAA+C,MAAK,CAACjB,KAAM,IAAIe,EAAKf,KAAQkB,QAASH,EAAKI,UAAWH,IAAKA,IAGvD,OA6BChD,QAAA,QAAAqC,cAACnC,mBAAA+C,MAAK,CACJjB,KAAK,IACLkB,QAASlD,QAAA,QAAAqC,cAACnC,mBAAAkD,SAAQ,CAACC,GAAG,iBAAiBC,SAAO,QAIpDtD,QAAA,QAAAqC,cAAA,MAAA,CAAKC,UAAU,OACbtC,QAAA,QAAAqC,cAAChC,SAAA,QAAM,WAnFrBkD,QAAA,QAAAhD","file":"index.min.js","sourcesContent":["import React from \"react\";\r\nimport { Routes, Route, Navigate, useLocation } from \"react-router-dom\";\r\nimport Navbar from \"components/navbar\";\r\nimport Sidebar from \"components/sidebar\";\r\nimport Footer from \"components/footer/Footer\";\r\nimport routes from \"routes\";\r\n\r\nexport default function Admin(props: { [x: string]: any }) {\r\n  const { ...rest } = props;\r\n  const location = useLocation();\r\n  const [open, setOpen] = React.useState(true);\r\n  const [currentRoute, setCurrentRoute] = React.useState(\"Main Dashboard\");\r\n\r\n  React.useEffect(() => {\r\n    window.addEventListener(\"resize\", () =>\r\n      window.innerWidth < 1200 ? setOpen(false) : setOpen(true)\r\n    );\r\n  }, []);\r\n  React.useEffect(() => {\r\n    getActiveRoute(routes);\r\n  }, [location.pathname]);\r\n\r\n  const getActiveRoute = (routes: RoutesType[]): string | boolean => {\r\n    let activeRoute = \"Main Dashboard\";\r\n    for (let i = 0; i < routes.length; i++) {\r\n      if (\r\n        window.location.href.indexOf(\r\n          routes[i].layout + \"/\" + routes[i].path\r\n        ) !== -1\r\n      ) {\r\n        setCurrentRoute(routes[i].name);\r\n      }\r\n    }\r\n    return activeRoute;\r\n  };\r\n  const getActiveNavbar = (routes: RoutesType[]): string | boolean => {\r\n    let activeNavbar = false;\r\n    for (let i = 0; i < routes.length; i++) {\r\n      if (\r\n        window.location.href.indexOf(routes[i].layout + routes[i].path) !== -1\r\n      ) {\r\n        return routes[i].secondary;\r\n      }\r\n    }\r\n    return activeNavbar;\r\n  };\r\n\r\n  const getRoutes = (routes: RoutesType[]): any => {\r\n    return routes.map((prop, key) => {\r\n      if (prop.layout === \"/admin\") { \r\n        return (\r\n          <Route path={`/${prop.path}`} element={prop.component} key={key} />\r\n        );\r\n      } else {\r\n        return null;\r\n      }\r\n    });\r\n  };\r\n\r\n  document.documentElement.dir = \"ltr\";\r\n  return (\r\n    <div className=\"flex h-full w-full\">\r\n      <Sidebar open={open} onClose={() => setOpen(false)} />\r\n      {/* Navbar & Main Content */}\r\n      <div className=\"h-full w-fvmfhwull bg-lightPrimary dark:!bg-navy-900\">\r\n        {/* Main Content */}\r\n        <main\r\n          className={`mx-[12px] h-full flex-none transition-all md:pr-2 xl:ml-[313px]`}\r\n        >\r\n          {/* Routes */}\r\n          <div className=\"h-full\">\r\n            <Navbar\r\n              onOpenSidenav={() => setOpen(true)}\r\n              brandText={currentRoute}\r\n              secondary={getActiveNavbar(routes)}\r\n              {...rest}\r\n            />\r\n            <div className=\"pt-5s mx-auto mb-auto h-full min-h-[84vh] p-2 md:pr-2\">\r\n              <Routes>\r\n                {/* TODO: routes.tsx에 프로젝트 리스트 선택할 수 있도록 추가\r\n                     */}\r\n                {getRoutes(routes)}\r\n\r\n                <Route\r\n                  path=\"/\"\r\n                  element={<Navigate to=\"/admin/default\" replace />}\r\n                />\r\n              </Routes>\r\n            </div>\r\n            <div className=\"p-3\">\r\n              <Footer />\r\n            </div>\r\n          </div>\r\n        </main>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n"]}