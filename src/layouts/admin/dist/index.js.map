{"version":3,"sources":["index.tsx"],"names":[],"mappings":"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","file":"index.js","sourcesContent":["import React from \"react\";\r\nimport { Routes, Route, Navigate, useLocation } from \"react-router-dom\";\r\nimport Navbar from \"components/navbar\";\r\nimport Sidebar from \"components/sidebar\";\r\nimport Footer from \"components/footer/Footer\";\r\nimport routes from \"routes\";\r\n\r\nexport default function Admin(props: { [x: string]: any }) {\r\n  const { ...rest } = props;\r\n  const location = useLocation();\r\n  const [open, setOpen] = React.useState(true);\r\n  const [currentRoute, setCurrentRoute] = React.useState(\"Main Dashboard\");\r\n\r\n  React.useEffect(() => {\r\n    window.addEventListener(\"resize\", () =>\r\n      window.innerWidth < 1200 ? setOpen(false) : setOpen(true)\r\n    );\r\n  }, []);\r\n  React.useEffect(() => {\r\n    getActiveRoute(routes);\r\n  }, [location.pathname]);\r\n\r\n  const getActiveRoute = (routes: RoutesType[]): string | boolean => {\r\n    let activeRoute = \"Main Dashboard\";\r\n    for (let i = 0; i < routes.length; i++) {\r\n      if (\r\n        window.location.href.indexOf(\r\n          routes[i].layout + \"/\" + routes[i].path\r\n        ) !== -1\r\n      ) {\r\n        setCurrentRoute(routes[i].name);\r\n      }\r\n    }\r\n    return activeRoute;\r\n  };\r\n  const getActiveNavbar = (routes: RoutesType[]): string | boolean => {\r\n    let activeNavbar = false;\r\n    for (let i = 0; i < routes.length; i++) {\r\n      if (\r\n        window.location.href.indexOf(routes[i].layout + routes[i].path) !== -1\r\n      ) {\r\n        return routes[i].secondary;\r\n      }\r\n    }\r\n    return activeNavbar;\r\n  };\r\n\r\n  const getRoutes = (routes: RoutesType[]): any => {\r\n    return routes.map((prop, key) => {\r\n      if (prop.layout === \"/admin\") { \r\n        return (\r\n          <Route path={`/${prop.path}`} element={prop.component} key={key} />\r\n        );\r\n      } else {\r\n        return null;\r\n      }\r\n    });\r\n  };\r\n\r\n  document.documentElement.dir = \"ltr\";\r\n  return (\r\n    <div className=\"flex h-full w-full\">\r\n      <Sidebar open={open} onClose={() => setOpen(false)} />\r\n      {/* Navbar & Main Content */}\r\n      <div className=\"h-full w-fvmfhwull bg-lightPrimary dark:!bg-navy-900\">\r\n        {/* Main Content */}\r\n        <main\r\n          className={`mx-[12px] h-full flex-none transition-all md:pr-2 xl:ml-[313px]`}\r\n        >\r\n          {/* Routes */}\r\n          <div className=\"h-full\">\r\n            <Navbar\r\n              onOpenSidenav={() => setOpen(true)}\r\n              brandText={currentRoute}\r\n              secondary={getActiveNavbar(routes)}\r\n              {...rest}\r\n            />\r\n            <div className=\"pt-5s mx-auto mb-auto h-full min-h-[84vh] p-2 md:pr-2\">\r\n              <Routes>\r\n                {/* TODO: routes.tsx에 프로젝트 리스트 선택할 수 있도록 추가\r\n                     */}\r\n                {getRoutes(routes)}\r\n\r\n                <Route\r\n                  path=\"/\"\r\n                  element={<Navigate to=\"/admin/default\" replace />}\r\n                />\r\n              </Routes>\r\n            </div>\r\n            <div className=\"p-3\">\r\n              <Footer />\r\n            </div>\r\n          </div>\r\n        </main>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n"]}