{"version":3,"sources":["InputText.tsx"],"names":["react_1","require","DropdownMenu_1","InputText","_a","useState","id","content","noteBlocks","setNoteBlocks","_b","showDropdown","setShowDropdown","_c","top","left","cursorPosition","setCursorPosition","textRef","useRef","useLayoutEffect","current","focus","handleCreateBlockEnterKeyPress","event","key","preventDefault","prev","__spreadArrays","length","createElement","className","map","noteBlock","rows","ref","value","onChange","updatedNoteBlocks","__assign","target","handleContentChange","onKeyDown","currentTarget","selectionStart","offsetLeft","offsetTop","offsetHeight","handleSelectLabelSlashKeyPress","onInput","style","height","scrollHeight","placeholder","onClose","exports"],"mappings":"yfAAA,IAAAA,QAAAC,QAAA,SACAC,eAAAD,QAAA,kBAOA,SAAwBE,YAChB,IAAAC,EAAAJ,QAAAK,SAAA,CAAA,CAAAC,GAAA,EAAAC,QAAA,MAACC,EAAAJ,EAAA,GAAYK,EAAAL,EAAA,GACbM,EAAAV,QAAAK,UAAA,GAACM,EAAAD,EAAA,GAAcE,EAAAF,EAAA,GACfG,EAAAb,QAAAK,SAAA,CAAAS,IAAA,EAAAC,KAAA,IAACC,EAAAH,EAAA,GAAgBI,EAAAJ,EAAA,GACjBK,EAAUlB,QAAAmB,OAA4B,MAE5CnB,QAAAoB,gBAAgB,WACdF,EAAQG,QAAQC,UAWqB,SAAjCC,EAAkCC,EAA2ClB,GAC/D,UAAdkB,EAAMC,MACRD,EAAME,iBATRjB,EAAc,SAACkB,GACb,OAAOC,eACDD,EAAI,CAAE,CAAErB,GAAIqB,EAAKA,EAAKE,OAAS,GAAGvB,GAAK,EAAGC,QAAS,SAuC7D,OACEP,QAAA,QAAA8B,cAAA,MAAA,CAAKC,UAAU,+BACZvB,EAAWwB,IAAI,SAACC,GAAc,OAC7BjC,QAAA,QAAA8B,cAAA,WAAA,CACEI,KAAM,EACNC,IAAKjB,EACLZ,GAAG,aACHmB,IAAKQ,EAAU3B,GACf8B,MAAOH,EAAU1B,QACjB8B,SAAU,SAACb,GAAU,OApCD,SAACA,EAAyClB,GACpE,IAAMgC,EAAoB9B,EAAWwB,IAAI,SAACC,GACxC,OAAAA,EAAU3B,KAAOA,EAAIiC,SAAAA,SAAA,GAAMN,GAAS,CAAE1B,QAASiB,EAAMgB,OAAOJ,QAAUH,IAExExB,EAAc6B,GAgCaG,CAAoBjB,EAAOS,EAAU3B,KAC1DoC,UAAW,SAAClB,IAzBmB,SAACA,GACtC,GAAkB,MAAdA,EAAMC,IAAa,CAEf,IAAArB,EAAAoB,EAAAmB,cAAEC,EAAAxC,EAAAwC,eAAgBC,EAAAzC,EAAAyC,WAAYC,EAAA1C,EAAA0C,UAAWC,EAAA3C,EAAA2C,aAC/C9B,EAAkB,CAChBH,IAAKgC,EAAYC,EACjBhC,KAAM8B,EAA8B,EAAjBD,IAErBhC,GAAgB,OACO,cAAdY,EAAMC,KAAqC,WAAdD,EAAMC,KAE5Cb,GAAgB,GAeVoC,CAA+BxB,EAAOS,EAAU3B,IAChDiB,EAA+BC,EAAOS,EAAU3B,KAElD2C,QAAS,SAACzB,GAAU,OAA4BS,EAAU3B,GAjChEY,EAAQG,QAAQ6B,MAAMC,OAAS,YAC/BjC,EAAQG,QAAQ6B,MAAMC,OAASjC,EAAQG,QAAQ+B,aAAe,OAiCxDrB,UAAU,mDACVsB,YAAY,mBAEf1C,GACCX,QAAA,QAAA8B,cAAC5B,eAAA,QAAY,CAACc,eAAgBA,EAAgBsC,QAAS,WAAM,OAAA1C,GAAgB,OAvErF2C,QAAA,QAAApD","file":"InputText.min.js","sourcesContent":["import React, { useState, useRef, useEffect, Component, KeyboardEvent, ChangeEvent, useLayoutEffect, FormEvent } from 'react'\r\nimport DropdownMenu from './DropdownMenu';\r\n\r\ninterface NoteBlock {\r\n  id: number;\r\n  content: string;\r\n}\r\n\r\nexport default function InputText() {\r\n  const [noteBlocks, setNoteBlocks] = useState<NoteBlock[]>([{ id: 1, content: \"\" },]);\r\n  const [showDropdown, setShowDropdown] = useState(false);\r\n  const [cursorPosition, setCursorPosition] = useState({ top: 0, left: 0 });\r\n  const textRef = useRef<HTMLTextAreaElement>(null);\r\n\r\n  useLayoutEffect(() => {\r\n    textRef.current.focus();\r\n  });\r\n\r\n  const addNewNoteBlock = () => {\r\n    setNoteBlocks((prev) => {\r\n      return (\r\n        [...prev, { id: prev[prev.length - 1].id + 1, content: '' }]\r\n      );\r\n    });\r\n  };\r\n\r\n  const handleCreateBlockEnterKeyPress = (event: KeyboardEvent<HTMLTextAreaElement>, id: number) => {\r\n    if (event.key === 'Enter') {\r\n      event.preventDefault();\r\n      addNewNoteBlock();\r\n    }\r\n  }\r\n\r\n  const handleContentChange = (event: ChangeEvent<HTMLTextAreaElement>, id: number) => {\r\n    const updatedNoteBlocks = noteBlocks.map((noteBlock) =>\r\n      noteBlock.id === id ? { ...noteBlock, content: event.target.value } : noteBlock\r\n    );\r\n    setNoteBlocks(updatedNoteBlocks);\r\n  };\r\n\r\n  const handleTextAreaHeight = (event: FormEvent<HTMLTextAreaElement>, id: number) => {\r\n    textRef.current.style.height = 'auto';\r\n    textRef.current.style.height = textRef.current.scrollHeight + 'px';\r\n  }\r\n\r\n  const handleSelectLabelSlashKeyPress = (event: KeyboardEvent<HTMLTextAreaElement>, id: number) => {\r\n    if (event.key === '/') {\r\n      // '/' 키가 눌렸을 때 드롭다운 메뉴를 표시\r\n      const { selectionStart, offsetLeft, offsetTop, offsetHeight } = event.currentTarget;\r\n      setCursorPosition({\r\n        top: offsetTop + offsetHeight,\r\n        left: offsetLeft + selectionStart * 8, // 8px 간격으로 표시하도록 설정 (임의로 설정)\r\n      });\r\n      setShowDropdown(true);\r\n    } else if (event.key === 'Backspace' || event.key === 'Escape') {\r\n      // 'Escape' 키가 눌렸을 때 드롭다운 메뉴를 닫음\r\n      setShowDropdown(false);\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className=' ml-10 mt-5 w-full flex-col'>\r\n      {noteBlocks.map((noteBlock) => (\r\n        <textarea\r\n          rows={1}\r\n          ref={textRef}\r\n          id=\"note-block\"\r\n          key={noteBlock.id}\r\n          value={noteBlock.content}\r\n          onChange={(event) => handleContentChange(event, noteBlock.id)}\r\n          onKeyDown={(event) => {\r\n            handleSelectLabelSlashKeyPress(event, noteBlock.id)\r\n            handleCreateBlockEnterKeyPress(event, noteBlock.id)\r\n          }}\r\n          onInput={(event) => handleTextAreaHeight(event, noteBlock.id)}\r\n          className='w-[80%] resize-none bg-lightPrimary outline-none'\r\n          placeholder='text를 입력해주세요' />\r\n      ))}\r\n      {showDropdown && (\r\n        <DropdownMenu cursorPosition={cursorPosition} onClose={() => setShowDropdown(false)} />\r\n      )}\r\n    </div>\r\n  )\r\n}\r\n"]}