{"version":3,"sources":["InputText.tsx"],"names":["react_1","require","recoil_1","DropdownMenu_1","atom_1","InputText","_a","useState","id","content","noteBlocks","setNoteBlocks","_b","showDropdown","setShowDropdown","_c","top","left","cursorPosition","setCursorPosition","_d","_e","useRecoilState","labelState","textRef","useRef","useLayoutEffect","current","focus","handleCreateBlockEnterKeyPress","event","key","preventDefault","prev","__spreadArrays","length","createElement","className","map","noteBlock","rows","ref","value","onChange","updatedNoteBlocks","__assign","target","handleContentChange","onKeyDown","currentTarget","selectionStart","offsetLeft","offsetTop","offsetHeight","handleShowLabelsSlashKeyPress","onInput","style","height","scrollHeight","placeholder","onClose","exports"],"mappings":"yfAAA,IAAAA,QAAAC,QAAA,SACAC,SAAAD,QAAA,UACAE,eAAAF,QAAA,kBACAG,OAAAH,QAAA,gBAWA,SAAwBI,YAChB,IAAAC,EAAAN,QAAAO,SAAA,CAAA,CAAAC,GAAA,EAAAC,QAAA,MAACC,EAAAJ,EAAA,GAAYK,EAAAL,EAAA,GACbM,EAAAZ,QAAAO,UAAA,GAACM,EAAAD,EAAA,GAAcE,EAAAF,EAAA,GACfG,EAAAf,QAAAO,SAAA,CAAAS,IAAA,EAAAC,KAAA,IAACC,EAAAH,EAAA,GAAgBI,EAAAJ,EAAA,GACjBK,EAAApB,QAAAO,WACAc,GADCD,EAAA,GAAgBA,EAAA,GACjBlB,SAAAoB,eAAAlB,OAAAmB,aACAC,GADCH,EAAA,GAAYA,EAAA,GACHrB,QAAAyB,OAA4B,OAE5CzB,QAAA0B,gBAAgB,WACdF,EAAQG,QAAQC,UAWqB,SAAjCC,EAAkCC,EAA2CtB,GAC/D,UAAdsB,EAAMC,MACRD,EAAME,iBATRrB,EAAc,SAACsB,GACb,OAAOC,eACDD,EAAI,CAAE,CAAEzB,GAAIyB,EAAKA,EAAKE,OAAS,GAAG3B,GAAK,EAAGC,QAAS,SA2C7D,OACET,QAAA,QAAAoC,cAAA,MAAA,CAAKC,UAAU,+BACZ3B,EAAW4B,IAAI,SAACC,GAAc,OAC7BvC,QAAA,QAAAoC,cAAA,WAAA,CACEI,KAAM,EACNC,IAAKjB,EACLhB,GAAG,aACHuB,IAAKQ,EAAU/B,GACfkC,MAAOH,EAAU9B,QACjBkC,SAAU,SAACb,GAAU,OAxCD,SAACA,EAAyCtB,GACpE,IAAMoC,EAAoBlC,EAAW4B,IAAI,SAACC,GACxC,OAAAA,EAAU/B,KAAOA,EAAIqC,SAAAA,SAAA,GAAMN,GAAS,CAAE9B,QAASqB,EAAMgB,OAAOJ,QAAUH,IAExE5B,EAAciC,GAoCaG,CAAoBjB,EAAOS,EAAU/B,KAC1DwC,UAAW,SAAClB,IA7BkB,SAACA,GACrC,GAAkB,MAAdA,EAAMC,IAAa,CAEf,IAAAzB,EAAAwB,EAAAmB,cAAEC,EAAA5C,EAAA4C,eAAgBC,EAAA7C,EAAA6C,WAAYC,EAAA9C,EAAA8C,UAAWC,EAAA/C,EAAA+C,aAC/ClC,EAAkB,CAChBH,IAAKoC,EAAYC,EACjBpC,KAAMkC,EAA8B,EAAjBD,IAErBpC,GAAgB,OACO,cAAdgB,EAAMC,KAAqC,WAAdD,EAAMC,KAE5CjB,GAAgB,GAmBVwC,CAA8BxB,EAAOS,EAAU/B,IAC/CqB,EAA+BC,EAAOS,EAAU/B,KAElD+C,QAAS,SAACzB,GAAU,OAA4BS,EAAU/B,GArChEgB,EAAQG,QAAQ6B,MAAMC,OAAS,YAC/BjC,EAAQG,QAAQ6B,MAAMC,OAASjC,EAAQG,QAAQ+B,aAAe,OAqCxDrB,UAAU,mDACVsB,YAAY,mBAEf9C,GACCb,QAAA,QAAAoC,cAACjC,eAAA,QAAY,CAACe,eAAgBA,EAAgB0C,QAAS,WAAM,OAAA9C,GAAgB,OA7ErF+C,QAAA,QAAAxD","file":"InputText.min.js","sourcesContent":["import React, { useState, useRef, useEffect, Component, KeyboardEvent, ChangeEvent, useLayoutEffect, FormEvent } from 'react'\r\nimport { useRecoilState } from 'recoil';\r\nimport DropdownMenu from './DropdownMenu';\r\nimport { labelState } from 'context/atom';\r\n\r\ninterface NoteBlock {\r\n  id: number;\r\n  content: string;\r\n}\r\n\r\ninterface LabelImage {\r\n  content: string;\r\n}\r\n\r\nexport default function InputText() {\r\n  const [noteBlocks, setNoteBlocks] = useState<NoteBlock[]>([{ id: 1, content: \"\" },]);\r\n  const [showDropdown, setShowDropdown] = useState(false);\r\n  const [cursorPosition, setCursorPosition] = useState({ top: 0, left: 0 });\r\n  const [showLabelImage, setShowLabelImage] = useState();\r\n  const [labelImage, setLabeImage] = useRecoilState(labelState);\r\n  const textRef = useRef<HTMLTextAreaElement>(null);\r\n\r\n  useLayoutEffect(() => {\r\n    textRef.current.focus();\r\n  });\r\n\r\n  const addNewNoteBlock = () => {\r\n    setNoteBlocks((prev) => {\r\n      return (\r\n        [...prev, { id: prev[prev.length - 1].id + 1, content: '' }]\r\n      );\r\n    });\r\n  };\r\n\r\n  const handleCreateBlockEnterKeyPress = (event: KeyboardEvent<HTMLTextAreaElement>, id: number) => {\r\n    if (event.key === 'Enter') {\r\n      event.preventDefault();\r\n      addNewNoteBlock();\r\n    }\r\n  }\r\n\r\n  const handleContentChange = (event: ChangeEvent<HTMLTextAreaElement>, id: number) => {\r\n    const updatedNoteBlocks = noteBlocks.map((noteBlock) =>\r\n      noteBlock.id === id ? { ...noteBlock, content: event.target.value } : noteBlock\r\n    );\r\n    setNoteBlocks(updatedNoteBlocks);\r\n  };\r\n\r\n  const handleTextAreaHeight = (event: FormEvent<HTMLTextAreaElement>, id: number) => {\r\n    textRef.current.style.height = 'auto';\r\n    textRef.current.style.height = textRef.current.scrollHeight + 'px';\r\n  }\r\n\r\n  const handleShowLabelsSlashKeyPress = (event: KeyboardEvent<HTMLTextAreaElement>, id: number) => {\r\n    if (event.key === '/') {\r\n      // '/' 키가 눌렸을 때 드롭다운 메뉴를 표시\r\n      const { selectionStart, offsetLeft, offsetTop, offsetHeight } = event.currentTarget;\r\n      setCursorPosition({\r\n        top: offsetTop + offsetHeight,\r\n        left: offsetLeft + selectionStart * 8, // 8px 간격으로 표시하도록 설정 (임의로 설정)\r\n      });\r\n      setShowDropdown(true);\r\n    } else if (event.key === 'Backspace' || event.key === 'Escape') {\r\n      // 'Escape' 키가 눌렸을 때 드롭다운 메뉴를 닫음\r\n      setShowDropdown(false);\r\n    }\r\n  }\r\n\r\n  const handleShowLabel = () => {\r\n\r\n  }\r\n\r\n  return (\r\n    <div className=' ml-10 mt-5 w-full flex-col'>\r\n      {noteBlocks.map((noteBlock) => (\r\n        <textarea\r\n          rows={1}\r\n          ref={textRef}\r\n          id=\"note-block\"\r\n          key={noteBlock.id}\r\n          value={noteBlock.content}\r\n          onChange={(event) => handleContentChange(event, noteBlock.id)}\r\n          onKeyDown={(event) => {\r\n            handleShowLabelsSlashKeyPress(event, noteBlock.id)\r\n            handleCreateBlockEnterKeyPress(event, noteBlock.id)\r\n          }}\r\n          onInput={(event) => handleTextAreaHeight(event, noteBlock.id)}\r\n          className='w-[80%] resize-none bg-lightPrimary outline-none'\r\n          placeholder='text를 입력해주세요' />\r\n      ))}\r\n      {showDropdown && (\r\n        <DropdownMenu cursorPosition={cursorPosition} onClose={() => setShowDropdown(false)} />\r\n      )}\r\n    </div>\r\n  )\r\n}\r\n"]}