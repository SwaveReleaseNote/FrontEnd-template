{"version":3,"sources":["DropdownMenu.tsx"],"names":[],"mappings":";;AAAA,+BAAgE;AAYhE,SAAwB,YAAY,CAAC,KAAwB;IACzD,IAAM,SAAS,GAAG,cAAM,CAAoB,IAAI,CAAC,CAAC;IAClD,IAAM,cAAc,GAAG,KAAK,CAAC,cAAc,CAAC;IAE5C,IAAM,yBAAyB,GAAG,UAAC,KAAoC;QACnE,uCAAuC;QACvC,uBAAuB;QACvB,IAAI;QACJ,0CAA0C;QAC1C,uBAAuB;QACvB,IAAI;QACJ,6CAA6C;QAC7C,wBAAwB;QACxB,IAAI;QACJ,wCAAwC;QACxC,uBAAuB;QACvB,IAAI;IACR,CAAC,CAAA;IAED,IAAM,yBAAyB,GAAG,UAAC,KAAoC;IAEvE,CAAC,CAAA;IAED,IAAM,2BAA2B,GAAG,UAAC,KAAiC;QAClE,QAAQ,SAAS,CAAC,OAAO,CAAC,WAAW,EAAE;YACnC,KAAK,KAAK;gBACN,OAAM,CACF,6CAAW,CACd,CAAA;gBACD,MAAM;YACV,KAAK,QAAQ;gBAET,MAAM;YACV,KAAK,MAAM;gBAEP,MAAM;YACV,KAAK,QAAQ;gBAET,MAAM;YACV,KAAK,KAAK;gBAEN,MAAM;SACb;IACL,CAAC,CAAA;IAED,OAAO,CACH,0CACI,KAAK,EAAE,EAAE,QAAQ,EAAE,UAAU,EAAE,GAAG,EAAE,cAAc,CAAC,GAAG,EAAE,IAAI,EAAE,cAAc,CAAC,IAAI,EAAE;QAEnF,0CACI,SAAS,EAAC,oIAAoI,EAC9I,SAAS,EAAE,UAAC,KAAK;gBACb,yBAAyB,CAAC,KAAK,CAAC,CAAA;gBAChC,yBAAyB,CAAC,KAAK,CAAC,CAAA;YACpC,CAAC,EACD,OAAO,EAAE,UAAC,KAAK;gBACX,2BAA2B,CAAC,KAAK,CAAC,CAAA;YACtC,CAAC;YAED,6CAAQ,GAAG,EAAE,SAAS,EAAE,SAAS,EAAC,kBAAkB,UAE3C;YACT,6CAAQ,GAAG,EAAE,SAAS,EAAE,SAAS,EAAC,kBAAkB,aAE3C;YACT,6CAAQ,GAAG,EAAE,SAAS,EAAE,SAAS,EAAC,kBAAkB,WAE3C;YACT,6CAAQ,GAAG,EAAE,SAAS,EAAE,SAAS,EAAC,kBAAkB,aAE3C;YACT,6CAAQ,GAAG,EAAE,SAAS,EAAE,SAAS,EAAC,kBAAkB,UAE3C,CACP,CACJ,CACT,CAAA;AACL,CAAC;AA7ED,kCA6EC","file":"DropdownMenu.js","sourcesContent":["import React, { KeyboardEvent, useRef, MouseEvent } from 'react'\r\nimport Dropdown from 'components/dropdown';\r\nimport { IoMdInformationCircleOutline, IoMdNotificationsOutline } from 'react-icons/io';\r\nimport navbarimage from \"assets/img/layout/Navbar.png\";\r\nimport { BsArrowBarUp } from 'react-icons/bs';\r\nimport { ENETDOWN } from 'constants';\r\n\r\ninterface DropdownMenuProps {\r\n    cursorPosition: { top: number; left: number };\r\n    onClose: () => void;\r\n}\r\n\r\nexport default function DropdownMenu(props: DropdownMenuProps) {\r\n    const buttonRef = useRef<HTMLButtonElement>(null);\r\n    const cursorPosition = props.cursorPosition;\r\n\r\n    const handleChoiceLabelKeyPress = (event: KeyboardEvent<HTMLDivElement>) => {\r\n        // if(event.key === 'Home') { // 방향키 왼족\r\n        //     console.log('왼')\r\n        // }\r\n        // else if(event.key === 'PageUp') { // 위쪽\r\n        //     console.log('위')\r\n        // }\r\n        // else if(event.key === 'PageDown') { // 아래쪽\r\n        //     console.log('아래')\r\n        // }\r\n        // else if(event.key === 'End') { // 오른쪽\r\n        //     console.log('오')\r\n        // }\r\n    }\r\n\r\n    const handleSelectLavelkeyPress = (event: KeyboardEvent<HTMLDivElement>) => {\r\n        \r\n    }\r\n\r\n    const handleSelectLavelClickEvent = (event: MouseEvent<HTMLDivElement>) => {\r\n        switch (buttonRef.current.textContent) {\r\n            case \"new\":\r\n                return(\r\n                    <div></div>\r\n                )\r\n                break;\r\n            case \"update\":\r\n\r\n                break;\r\n            case \"stop\":\r\n\r\n                break;\r\n            case \"delete\":\r\n\r\n                break;\r\n            case \"etc\":\r\n\r\n                break;\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div\r\n            style={{ position: 'absolute', top: cursorPosition.top, left: cursorPosition.left }}\r\n        >\r\n            <div\r\n                className=' transition-all ease-in-out flex flex-col z-10 bg-lightPrimary divide-y divide-gray-200 rounded-lg shadow-md w-44 dark:bg-gray-700'\r\n                onKeyDown={(event) => {\r\n                    handleChoiceLabelKeyPress(event)\r\n                    handleSelectLavelkeyPress(event)\r\n                }}\r\n                onClick={(event) => {\r\n                    handleSelectLavelClickEvent(event)\r\n                }}\r\n            >\r\n                <button ref={buttonRef} className='hover:bg-navy-50'>\r\n                    new\r\n                </button>\r\n                <button ref={buttonRef} className='hover:bg-navy-50'>\r\n                    update\r\n                </button>\r\n                <button ref={buttonRef} className='hover:bg-navy-50'>\r\n                    stop\r\n                </button>\r\n                <button ref={buttonRef} className='hover:bg-navy-50'>\r\n                    delete\r\n                </button>\r\n                <button ref={buttonRef} className='hover:bg-navy-50'>\r\n                    etc\r\n                </button>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n"]}