{"version":3,"sources":["index.tsx"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;AAAA,+BAAkH;AAUlH,gDAA2C;AAC3C,0CAAqC;AACrC,wDAAmD;AAOnD,SAAwB,KAAK;IAE3B,IAAM,iBAAiB,GAAG,OAAO,CAAC;IAC5B,IAAA;;MAEJ,EAFK,kBAAU,EAAE,qBAEjB,CAAC;IACH,IAAM,OAAO,GAAG,cAAM,CAAsB,IAAI,CAAC,CAAC;IAElD,uBAAe,CAAC;QACd,OAAO,CAAC,OAAO,CAAC,KAAK,EAAE,CAAC;IAC1B,CAAC,CAAC,CAAC;IAEH,IAAM,eAAe,GAAG;QACtB,aAAa,CAAC,UAAC,IAAI;YACjB,OAAO,gBACD,IAAI,GAAE,EAAC,EAAE,EAAE,IAAI,CAAC,IAAI,CAAC,MAAM,GAAC,CAAC,CAAC,CAAC,EAAE,GAAC,CAAC,EAAE,OAAO,EAAC,EAAE,EAAC,GACrD,CAAC;QACJ,CAAC,CAAC,CAAC;IACL,CAAC,CAAC;IAEF,IAAM,8BAA8B,GAAG,UAAC,KAAyC,EAAE,EAAU;QAC3F,IAAI,KAAK,CAAC,GAAG,KAAK,OAAO,EAAE;YACzB,KAAK,CAAC,cAAc,EAAE,CAAC;YACvB,eAAe,EAAE,CAAC;SACnB;IACH,CAAC,CAAA;IAED,IAAM,mBAAmB,GAAG,UAAC,KAAuC,EAAE,EAAU;QAC9E,IAAM,iBAAiB,GAAG,UAAU,CAAC,GAAG,CAAC,UAAC,SAAS;YACjD,OAAA,SAAS,CAAC,EAAE,KAAK,EAAE,CAAC,CAAC,uBAAM,SAAS,KAAE,OAAO,EAAE,KAAK,CAAC,MAAM,CAAC,KAAK,IAAG,CAAC,CAAC,SAAS;QAA/E,CAA+E,CAChF,CAAC;QACF,aAAa,CAAC,iBAAiB,CAAC,CAAC;IACnC,CAAC,CAAC;IAEF,+BAA+B;IAC/B,8DAA8D;IAE9D,oCAAoC;IACpC,+DAA+D;IAC/D,kDAAkD;IAElD,8CAA8C;IAE9C,4BAA4B;IAC5B,KAAK;IAEL,yDAAyD;IACzD,iCAAiC;IACjC,8BAA8B;IAC9B,8BAA8B;IAC9B,MAAM;IACN,KAAK;IAEL,OAAO,CACL,0CAAK,SAAS,EAAC,0CAA0C;QACvD,0CAAK,SAAS,EAAC,2EAA2E;YACxF,0CAAK,SAAS,EAAC,aAAa;gBACzB,UAAU,CAAC,GAAG,CAAC,UAAC,SAAS,IAAK,OAAA,CAC7B,+CACA,GAAG,EAAE,OAAO,EACZ,EAAE,EAAC,YAAY,EACf,GAAG,EAAE,SAAS,CAAC,EAAE,EACjB,KAAK,EAAE,SAAS,CAAC,OAAO,EACxB,QAAQ,EAAE,UAAC,CAAC,IAAK,OAAA,mBAAmB,CAAC,CAAC,EAAE,SAAS,CAAC,EAAE,CAAC,EAApC,CAAoC,EACrD,SAAS,EAAE,UAAC,CAAC,IAAK,OAAA,8BAA8B,CAAC,CAAC,EAAE,SAAS,CAAC,EAAE,CAAC,EAA/C,CAA+C,GAAI,CACtE,EAR8B,CAQ9B,CAAC;gBAGF,+CAAU,EAAE,EAAC,cAAc,EAAC,WAAW,EAAC,MAAM,GAAY,CACtD;YAEN,iCAAC,wBAAW,IAAC,KAAK,EAAE,GAAG;gBACrB,0CAAK,SAAS,EAAC,sCAAsC;oBACnD,iCAAC,oBAAO,IAAC,aAAa,EAAE,iBAAiB,GAAI;oBAC7C,iCAAC,iBAAI,OAAG,CACJ,CACM,CACV,CACF,CACP,CAAA;AACH,CAAC;AAhFD,2BAgFC","file":"index.js","sourcesContent":["import React, { useState, useRef, useEffect, Component, KeyboardEvent, ChangeEvent, useLayoutEffect } from 'react'\r\nimport NoteField from 'components/note/NoteField'\r\nimport tableDataDevelopment from \"../tables/variables/tableDataDevelopment\";\r\nimport tableDataCheck from \"../tables/variables/tableDataCheck\";\r\nimport CheckTable from \"../tables/components/CheckTable\";\r\nimport tableDataColumns from \"../tables/variables/tableDataColumns\";\r\nimport tableDataComplex from \"../tables/variables/tableDataComplex\";\r\nimport DevelopmentTable from \"../tables/components/DevelopmentTable\";\r\nimport ColumnsTable from \"../tables/components/ColumnsTable\";\r\nimport ComplexTable from \"../tables/components/ComplexTable\";\r\nimport Version from './components/Version';\r\nimport Date from './components/Date';\r\nimport SideMenubar from './components/SideMenubar';\r\n\r\ninterface NoteBlock {\r\n  id: number;\r\n  content: string;\r\n}\r\n\r\nexport default function Index() {\r\n\r\n  const mockLatestVersion = \"3.6.5\";\r\n  const [noteBlocks, setNoteBlocks] = useState<NoteBlock[]>([\r\n    {id:1, content: \"\"},\r\n  ]);\r\n  const textRef = useRef<HTMLTextAreaElement>(null);\r\n\r\n  useLayoutEffect(() => {\r\n    textRef.current.focus();\r\n  });\r\n\r\n  const addNewNoteBlock = () => {\r\n    setNoteBlocks((prev) => {\r\n      return (\r\n        [...prev, {id: prev[prev.length-1].id+1, content:''}] \r\n      );\r\n    });\r\n  };\r\n  \r\n  const handleCreateBlockEnterKeyPress = (event: KeyboardEvent<HTMLTextAreaElement>, id: number) => {\r\n    if (event.key === 'Enter') {\r\n      event.preventDefault();\r\n      addNewNoteBlock();\r\n    }\r\n  }\r\n\r\n  const handleContentChange = (event: ChangeEvent<HTMLTextAreaElement>, id: number) => {\r\n    const updatedNoteBlocks = noteBlocks.map((noteBlock) =>\r\n      noteBlock.id === id ? { ...noteBlock, content: event.target.value } : noteBlock\r\n    );\r\n    setNoteBlocks(updatedNoteBlocks);\r\n  };\r\n\r\n  // 엔터 누를 때 마다 textarea 나오도록 만들기\r\n  // const newNoteBlock = document.getElementById(\"note-block\");\r\n\r\n  // function createNewNoteContent() {\r\n  //   const newNoteContent = document.createElement(\"textarea\");\r\n  //   newNoteContent.classList.add(\"note-content\");\r\n\r\n  //   newNoteBlock.appendChild(newNoteContent);\r\n\r\n  //   newNoteContent.focus();\r\n  // };\r\n\r\n  // document.addEventListener(\"keydown\", function(event) {\r\n  //   if (event.key === \"Enter\") {\r\n  //     event.preventDefault();\r\n  //     createNewNoteContent();\r\n  //   }\r\n  // })\r\n\r\n  return (\r\n    <div className=\"h-full grid-cols-1 gap-5 2xl:grid-cols-3\">\r\n      <div className=\"flex justify-between col-span-1 h-fit w-full xl:col-span-1 2xl:col-span-2\">\r\n        <div className='mt-5 w-full'>\r\n          {noteBlocks.map((noteBlock) => (\r\n            <textarea\r\n            ref={textRef}\r\n            id=\"note-block\"\r\n            key={noteBlock.id}\r\n            value={noteBlock.content}\r\n            onChange={(e) => handleContentChange(e, noteBlock.id)}\r\n            onKeyDown={(e) => handleCreateBlockEnterKeyPress(e, noteBlock.id)} />\r\n          ))\r\n\r\n          }\r\n          <textarea id=\"note-content\" placeholder='test'></textarea>\r\n        </div>\r\n        {/* 버전, 날짜 생성 카드 */}\r\n        <SideMenubar width={280}>\r\n          <div className=\"mt-5 flex-row justify-center h-auto \">\r\n            <Version latestVersion={mockLatestVersion} />\r\n            <Date />\r\n          </div>\r\n        </SideMenubar>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n"]}