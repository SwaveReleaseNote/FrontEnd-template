{"version":3,"sources":["SidebarList.tsx"],"names":[],"mappings":";;AAAA,+BAAuC;AACvC,mEAAgD;AAChD,mDAA6C;AAC7C,6CAAuC;AAavC,SAAS,WAAW,CAAC,KAAU;;IAE3B,IAAM,KAAK,GAAG,KAAK,CAAC,SAAS,CAAC;IAC9B,IAAM,WAAW,GAAG,KAAK,CAAC,WAAW,CAAC;IAEhC,IAAA,uBAA+D,EAA9D,uBAAe,EAAE,0BAA6C,CAAC;IAChE,IAAA,mEAAuE,EAAtE,iBAAS,EAAE,oBAA2D,CAAC;IACxE,IAAA,uBAAiE,EAAhE,uBAAe,EAAE,0BAA+C,CAAC;IAClE,IAAA,uBAA2F,EAA1F,oCAA4B,EAAE,uCAA4D,CAAC;IAElG,IAAM,mBAAmB,GAAG,UAAC,KAA2C;QACpE,IAAM,KAAK,GAAG,KAAK,CAAC,MAAM,CAAC,KAAK,CAAC;QACjC,kBAAkB,CAAC,SAAS,CAAC,MAAM,CAAC,UAAC,cAA2B,IAAK,OAAA,cAAc,CAAC,WAAW,KAAK,KAAK,EAApC,CAAoC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QAC/G,OAAO,CAAC,GAAG,CAAC,eAAe,CAAC,CAAC;QAE7B,kBAAkB,CAAC,eAAe,CAAC,YAAY,CAAC,CAAC;IACrD,CAAC,CAAA;IAED,IAAI,KAAK,SAAG,eAAe,0CAAE,GAAG,CAAC,UAAC,OAAO,IAAK,OAAA,iCAAC,wBAAW,IAAC,MAAM,EAAE,OAAO,GAAI,EAAhC,CAAgC,CAAC,CAAC;IAChF,IAAI,QAAQ,SAAG,SAAS,0CAAE,GAAG,CAAC,UAAC,OAAO,IAAK,OAAA,iCAAC,2BAAc,IAAC,SAAS,EAAE,OAAO,GAAI,EAAtC,CAAsC,CAAC,CAAC;IAEnF,OAAO,CACH,0CAAK,SAAS,EAAC,6BAA6B;QACxC,yCAAI,SAAS,EAAC,uBAAuB;YACjC;gBAEI,6CAAQ,QAAQ,EAAE,mBAAmB,IAChC,QAAQ,CACJ,CACR;YACL;gBAEI,0CAAK,SAAS,EAAC,yFAAyF,IACnG,KAAK,CACJ,CACL,CACJ,CACH,CACT,CAAA;AACL,CAAC;AAED,qBAAe,WAAW,CAAC","file":"SidebarList.js","sourcesContent":["import React, { useState } from 'react'\r\nimport data from '../mockData/noteListData.json'\r\nimport SidebarProject from './SidebarProject'\r\nimport SidebarNote from './SidebarNote'\r\n\r\ntype releaseNote = {\r\n    id: number;\r\n    version: string;\r\n};\r\n\r\ntype projectType = {\r\n    id: number;\r\n    projectName: String;\r\n    releaseNotes: releaseNote[];\r\n};\r\n\r\nfunction SidebarList(props: any) {\r\n\r\n    const route = props.routeName;\r\n    const activeRoute = props.activeRoute;\r\n\r\n    const [selectedProject, setSelectedProject] = useState<projectType>();\r\n    const [myProject, setMyProject] = useState<projectType[]>(data.mock.projects);\r\n    const [releaseNoteList, setReleaseNoteList] = useState<releaseNote[]>();\r\n    const [releaseNotesInCurrentProject, setReleaseNotesInCurrentProject] = useState<projectType[]>();\r\n\r\n    const handleSelectProject = (event: React.ChangeEvent<HTMLSelectElement>) => {\r\n        const value = event.target.value;\r\n        setSelectedProject(myProject.filter((currentProject: projectType) => currentProject.projectName === value)[0]);\r\n        console.log(selectedProject);\r\n\r\n        setReleaseNoteList(selectedProject.releaseNotes);\r\n    }\r\n\r\n    var notes = releaseNoteList?.map((release) => <SidebarNote myNote={release} />);\r\n    var projects = myProject?.map((project) => <SidebarProject myProject={project} />);\r\n\r\n    return (\r\n        <div className=\"bg-gray-50 dark:bg-gray-800\">\r\n            <ul className=\"space-y-2 font-medium\">\r\n                <li>\r\n                    {/* 프로젝트 리스트 옵션 부분 */}\r\n                    <select onChange={handleSelectProject}>\r\n                        {projects}\r\n                    </select>\r\n                </li>\r\n                <li>\r\n                    {/* TODO: 크기 고정해야합니다 */}\r\n                    <div className=\"text-gray-900 rounded-lg dark:text-white hover:bg-gray-100 dark:hover:bg-gray-700 group\">\r\n                        {notes}\r\n                    </div>\r\n                </li>\r\n            </ul>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SidebarList;\r\n"]}